/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: CapModel4WS.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2010
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 186475 2010-12-13 09:51:23Z ACHIEVO\hans.shi $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AgencyProfWebServiceServiceSoapBinding", Namespace = "http://service.webservice.accela.com/")]
    public partial class AgencyProfWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getAllAgencyLogosOperationCompleted;

        private System.Threading.SendOrPostCallback getLogoListByLogoTypesOperationCompleted;

        private System.Threading.SendOrPostCallback getAgencyLogosOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public AgencyProfWebServiceService()
        {
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event getAllAgencyLogosCompletedEventHandler getAllAgencyLogosCompleted;

        /// <remarks/>
        public event getLogoListByLogoTypesCompletedEventHandler getLogoListByLogoTypesCompleted;

        /// <remarks/>
        public event getAgencyLogosCompletedEventHandler getAgencyLogosCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LogoModel[] getAllAgencyLogos([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0)
        {
            object[] results = this.Invoke("getAllAgencyLogos", new object[] {
                        arg0});
            return ((LogoModel[])(results[0]));
        }

        /// <remarks/>
        public void getAllAgencyLogosAsync(string arg0)
        {
            this.getAllAgencyLogosAsync(arg0, null);
        }

        /// <remarks/>
        public void getAllAgencyLogosAsync(string arg0, object userState)
        {
            if ((this.getAllAgencyLogosOperationCompleted == null))
            {
                this.getAllAgencyLogosOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAgencyLogosOperationCompleted);
            }
            this.InvokeAsync("getAllAgencyLogos", new object[] {
                        arg0}, this.getAllAgencyLogosOperationCompleted, userState);
        }

        private void OngetAllAgencyLogosOperationCompleted(object arg)
        {
            if ((this.getAllAgencyLogosCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAgencyLogosCompleted(this, new getAllAgencyLogosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LogoModel[] getLogoListByLogoTypes([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] arg1)
        {
            object[] results = this.Invoke("getLogoListByLogoTypes", new object[] {
                        arg0,
                        arg1});
            return ((LogoModel[])(results[0]));
        }

        /// <remarks/>
        public void getLogoListByLogoTypesAsync(string arg0, string[] arg1)
        {
            this.getLogoListByLogoTypesAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getLogoListByLogoTypesAsync(string arg0, string[] arg1, object userState)
        {
            if ((this.getLogoListByLogoTypesOperationCompleted == null))
            {
                this.getLogoListByLogoTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLogoListByLogoTypesOperationCompleted);
            }
            this.InvokeAsync("getLogoListByLogoTypes", new object[] {
                        arg0,
                        arg1}, this.getLogoListByLogoTypesOperationCompleted, userState);
        }

        private void OngetLogoListByLogoTypesOperationCompleted(object arg)
        {
            if ((this.getLogoListByLogoTypesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLogoListByLogoTypesCompleted(this, new getLogoListByLogoTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LogoModel[] getAgencyLogos([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2)
        {
            object[] results = this.Invoke("getAgencyLogos", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((LogoModel[])(results[0]));
        }

        /// <remarks/>
        public void getAgencyLogosAsync(string arg0, string[] arg1, string arg2)
        {
            this.getAgencyLogosAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void getAgencyLogosAsync(string arg0, string[] arg1, string arg2, object userState)
        {
            if ((this.getAgencyLogosOperationCompleted == null))
            {
                this.getAgencyLogosOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAgencyLogosOperationCompleted);
            }
            this.InvokeAsync("getAgencyLogos", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getAgencyLogosOperationCompleted, userState);
        }

        private void OngetAgencyLogosOperationCompleted(object arg)
        {
            if ((this.getAgencyLogosCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAgencyLogosCompleted(this, new getAgencyLogosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getAllAgencyLogosCompletedEventHandler(object sender, getAllAgencyLogosCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAgencyLogosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getAllAgencyLogosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LogoModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((LogoModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getLogoListByLogoTypesCompletedEventHandler(object sender, getLogoListByLogoTypesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLogoListByLogoTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getLogoListByLogoTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LogoModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((LogoModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getAgencyLogosCompletedEventHandler(object sender, getAgencyLogosCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAgencyLogosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getAgencyLogosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LogoModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((LogoModel[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591