/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: Reference.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2009-2010
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 185374 2010-11-26 09:47:10Z ACHIEVO\xinter.peng $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "I18nSettingsWebServiceServiceSoapBinding", Namespace = "http://service.webservice.accela.com/")]
    public partial class I18nSettingsWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getI18nPrimarySettingsOperationCompleted;

        private System.Threading.SendOrPostCallback getI18nLocaleRelevantSettingsOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public I18nSettingsWebServiceService()
        {
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event getI18nPrimarySettingsCompletedEventHandler getI18nPrimarySettingsCompleted;

        /// <remarks/>
        public event getI18nLocaleRelevantSettingsCompletedEventHandler getI18nLocaleRelevantSettingsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public I18nPrimarySettingsModel getI18nPrimarySettings([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0)
        {
            object[] results = this.Invoke("getI18nPrimarySettings", new object[] {
                        arg0});
            return ((I18nPrimarySettingsModel)(results[0]));
        }

        /// <remarks/>
        public void getI18nPrimarySettingsAsync(string arg0)
        {
            this.getI18nPrimarySettingsAsync(arg0, null);
        }

        /// <remarks/>
        public void getI18nPrimarySettingsAsync(string arg0, object userState)
        {
            if ((this.getI18nPrimarySettingsOperationCompleted == null))
            {
                this.getI18nPrimarySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetI18nPrimarySettingsOperationCompleted);
            }
            this.InvokeAsync("getI18nPrimarySettings", new object[] {
                        arg0}, this.getI18nPrimarySettingsOperationCompleted, userState);
        }

        private void OngetI18nPrimarySettingsOperationCompleted(object arg)
        {
            if ((this.getI18nPrimarySettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getI18nPrimarySettingsCompleted(this, new getI18nPrimarySettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public I18nLocaleRelevantSettingsModel getI18nLocaleRelevantSettings([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1)
        {
            object[] results = this.Invoke("getI18nLocaleRelevantSettings", new object[] {
                        arg0,
                        arg1});
            return ((I18nLocaleRelevantSettingsModel)(results[0]));
        }

        /// <remarks/>
        public void getI18nLocaleRelevantSettingsAsync(string arg0, string arg1)
        {
            this.getI18nLocaleRelevantSettingsAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getI18nLocaleRelevantSettingsAsync(string arg0, string arg1, object userState)
        {
            if ((this.getI18nLocaleRelevantSettingsOperationCompleted == null))
            {
                this.getI18nLocaleRelevantSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetI18nLocaleRelevantSettingsOperationCompleted);
            }
            this.InvokeAsync("getI18nLocaleRelevantSettings", new object[] {
                        arg0,
                        arg1}, this.getI18nLocaleRelevantSettingsOperationCompleted, userState);
        }

        private void OngetI18nLocaleRelevantSettingsOperationCompleted(object arg)
        {
            if ((this.getI18nLocaleRelevantSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getI18nLocaleRelevantSettingsCompleted(this, new getI18nLocaleRelevantSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getI18nPrimarySettingsCompletedEventHandler(object sender, getI18nPrimarySettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getI18nPrimarySettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getI18nPrimarySettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public I18nPrimarySettingsModel Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((I18nPrimarySettingsModel)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getI18nLocaleRelevantSettingsCompletedEventHandler(object sender, getI18nLocaleRelevantSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getI18nLocaleRelevantSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getI18nLocaleRelevantSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public I18nLocaleRelevantSettingsModel Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((I18nLocaleRelevantSettingsModel)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591