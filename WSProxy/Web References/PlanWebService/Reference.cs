/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: CapModel4WS.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2010
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 179034 2010-08-16 09:17:55Z ACHIEVO\jackie.yu $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PlanWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
    public partial class PlanWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getPublicUserPlanByPKOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPublicUserUploadedPlansOperationCompleted;
        
        private System.Threading.SendOrPostCallback createPublicUserPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPublicUserPlansOperationCompleted;
        
        private System.Threading.SendOrPostCallback removePublicUserPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPublicUserPlansByTransactionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePublicUserPlanStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePublicUserPlanTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PlanWebServiceService() {
            
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getPublicUserPlanByPKCompletedEventHandler getPublicUserPlanByPKCompleted;
        
        /// <remarks/>
        public event getPublicUserUploadedPlansCompletedEventHandler getPublicUserUploadedPlansCompleted;
        
        /// <remarks/>
        public event createPublicUserPlanCompletedEventHandler createPublicUserPlanCompleted;
        
        /// <remarks/>
        public event getPublicUserPlansCompletedEventHandler getPublicUserPlansCompleted;
        
        /// <remarks/>
        public event removePublicUserPlanCompletedEventHandler removePublicUserPlanCompleted;
        
        /// <remarks/>
        public event getPublicUserPlansByTransactionIDCompletedEventHandler getPublicUserPlansByTransactionIDCompleted;
        
        /// <remarks/>
        public event updatePublicUserPlanStatusCompletedEventHandler updatePublicUserPlanStatusCompleted;
        
        /// <remarks/>
        public event updatePublicUserPlanTransactionCompletedEventHandler updatePublicUserPlanTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PublicUserPlanModel4WS getPublicUserPlanByPK([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("getPublicUserPlanByPK", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((PublicUserPlanModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void getPublicUserPlanByPKAsync(string arg0, long arg1, string arg2) {
            this.getPublicUserPlanByPKAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getPublicUserPlanByPKAsync(string arg0, long arg1, string arg2, object userState) {
            if ((this.getPublicUserPlanByPKOperationCompleted == null)) {
                this.getPublicUserPlanByPKOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublicUserPlanByPKOperationCompleted);
            }
            this.InvokeAsync("getPublicUserPlanByPK", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getPublicUserPlanByPKOperationCompleted, userState);
        }
        
        private void OngetPublicUserPlanByPKOperationCompleted(object arg) {
            if ((this.getPublicUserPlanByPKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublicUserPlanByPKCompleted(this, new getPublicUserPlanByPKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PublicUserPlanModel4WS[] getPublicUserUploadedPlans([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getPublicUserUploadedPlans", new object[] {
                        arg0,
                        arg1});
            return ((PublicUserPlanModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getPublicUserUploadedPlansAsync(string arg0, string arg1) {
            this.getPublicUserUploadedPlansAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getPublicUserUploadedPlansAsync(string arg0, string arg1, object userState) {
            if ((this.getPublicUserUploadedPlansOperationCompleted == null)) {
                this.getPublicUserUploadedPlansOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublicUserUploadedPlansOperationCompleted);
            }
            this.InvokeAsync("getPublicUserUploadedPlans", new object[] {
                        arg0,
                        arg1}, this.getPublicUserUploadedPlansOperationCompleted, userState);
        }
        
        private void OngetPublicUserUploadedPlansOperationCompleted(object arg) {
            if ((this.getPublicUserUploadedPlansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublicUserUploadedPlansCompleted(this, new getPublicUserUploadedPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PublicUserPlanModel4WS createPublicUserPlan([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] PublicUserPlanModel4WS arg0) {
            object[] results = this.Invoke("createPublicUserPlan", new object[] {
                        arg0});
            return ((PublicUserPlanModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void createPublicUserPlanAsync(PublicUserPlanModel4WS arg0) {
            this.createPublicUserPlanAsync(arg0, null);
        }
        
        /// <remarks/>
        public void createPublicUserPlanAsync(PublicUserPlanModel4WS arg0, object userState) {
            if ((this.createPublicUserPlanOperationCompleted == null)) {
                this.createPublicUserPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreatePublicUserPlanOperationCompleted);
            }
            this.InvokeAsync("createPublicUserPlan", new object[] {
                        arg0}, this.createPublicUserPlanOperationCompleted, userState);
        }
        
        private void OncreatePublicUserPlanOperationCompleted(object arg) {
            if ((this.createPublicUserPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createPublicUserPlanCompleted(this, new createPublicUserPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PublicUserPlanModel4WS[] getPublicUserPlans([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getPublicUserPlans", new object[] {
                        arg0,
                        arg1});
            return ((PublicUserPlanModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getPublicUserPlansAsync(string arg0, string arg1) {
            this.getPublicUserPlansAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getPublicUserPlansAsync(string arg0, string arg1, object userState) {
            if ((this.getPublicUserPlansOperationCompleted == null)) {
                this.getPublicUserPlansOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublicUserPlansOperationCompleted);
            }
            this.InvokeAsync("getPublicUserPlans", new object[] {
                        arg0,
                        arg1}, this.getPublicUserPlansOperationCompleted, userState);
        }
        
        private void OngetPublicUserPlansOperationCompleted(object arg) {
            if ((this.getPublicUserPlansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublicUserPlansCompleted(this, new getPublicUserPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removePublicUserPlan([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] PublicUserPlanModel4WS arg0) {
            this.Invoke("removePublicUserPlan", new object[] {
                        arg0});
        }
        
        /// <remarks/>
        public void removePublicUserPlanAsync(PublicUserPlanModel4WS arg0) {
            this.removePublicUserPlanAsync(arg0, null);
        }
        
        /// <remarks/>
        public void removePublicUserPlanAsync(PublicUserPlanModel4WS arg0, object userState) {
            if ((this.removePublicUserPlanOperationCompleted == null)) {
                this.removePublicUserPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremovePublicUserPlanOperationCompleted);
            }
            this.InvokeAsync("removePublicUserPlan", new object[] {
                        arg0}, this.removePublicUserPlanOperationCompleted, userState);
        }
        
        private void OnremovePublicUserPlanOperationCompleted(object arg) {
            if ((this.removePublicUserPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removePublicUserPlanCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PublicUserPlanModel4WS[] getPublicUserPlansByTransactionID([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("getPublicUserPlansByTransactionID", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((PublicUserPlanModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getPublicUserPlansByTransactionIDAsync(string arg0, long arg1, string arg2) {
            this.getPublicUserPlansByTransactionIDAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getPublicUserPlansByTransactionIDAsync(string arg0, long arg1, string arg2, object userState) {
            if ((this.getPublicUserPlansByTransactionIDOperationCompleted == null)) {
                this.getPublicUserPlansByTransactionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublicUserPlansByTransactionIDOperationCompleted);
            }
            this.InvokeAsync("getPublicUserPlansByTransactionID", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getPublicUserPlansByTransactionIDOperationCompleted, userState);
        }
        
        private void OngetPublicUserPlansByTransactionIDOperationCompleted(object arg) {
            if ((this.getPublicUserPlansByTransactionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublicUserPlansByTransactionIDCompleted(this, new getPublicUserPlansByTransactionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updatePublicUserPlanStatus([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3) {
            this.Invoke("updatePublicUserPlanStatus", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
        }
        
        /// <remarks/>
        public void updatePublicUserPlanStatusAsync(string arg0, string arg1, string arg2, string arg3) {
            this.updatePublicUserPlanStatusAsync(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void updatePublicUserPlanStatusAsync(string arg0, string arg1, string arg2, string arg3, object userState) {
            if ((this.updatePublicUserPlanStatusOperationCompleted == null)) {
                this.updatePublicUserPlanStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePublicUserPlanStatusOperationCompleted);
            }
            this.InvokeAsync("updatePublicUserPlanStatus", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.updatePublicUserPlanStatusOperationCompleted, userState);
        }
        
        private void OnupdatePublicUserPlanStatusOperationCompleted(object arg) {
            if ((this.updatePublicUserPlanStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePublicUserPlanStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long updatePublicUserPlanTransaction([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long[] arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("updatePublicUserPlanTransaction", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void updatePublicUserPlanTransactionAsync(string arg0, long[] arg1, string arg2) {
            this.updatePublicUserPlanTransactionAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void updatePublicUserPlanTransactionAsync(string arg0, long[] arg1, string arg2, object userState) {
            if ((this.updatePublicUserPlanTransactionOperationCompleted == null)) {
                this.updatePublicUserPlanTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePublicUserPlanTransactionOperationCompleted);
            }
            this.InvokeAsync("updatePublicUserPlanTransaction", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.updatePublicUserPlanTransactionOperationCompleted, userState);
        }
        
        private void OnupdatePublicUserPlanTransactionOperationCompleted(object arg) {
            if ((this.updatePublicUserPlanTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePublicUserPlanTransactionCompleted(this, new updatePublicUserPlanTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPublicUserPlanByPKCompletedEventHandler(object sender, getPublicUserPlanByPKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublicUserPlanByPKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublicUserPlanByPKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicUserPlanModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicUserPlanModel4WS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPublicUserUploadedPlansCompletedEventHandler(object sender, getPublicUserUploadedPlansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublicUserUploadedPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublicUserUploadedPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicUserPlanModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicUserPlanModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void createPublicUserPlanCompletedEventHandler(object sender, createPublicUserPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createPublicUserPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createPublicUserPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicUserPlanModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicUserPlanModel4WS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPublicUserPlansCompletedEventHandler(object sender, getPublicUserPlansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublicUserPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublicUserPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicUserPlanModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicUserPlanModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void removePublicUserPlanCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPublicUserPlansByTransactionIDCompletedEventHandler(object sender, getPublicUserPlansByTransactionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublicUserPlansByTransactionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublicUserPlansByTransactionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicUserPlanModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicUserPlanModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updatePublicUserPlanStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updatePublicUserPlanTransactionCompletedEventHandler(object sender, updatePublicUserPlanTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatePublicUserPlanTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePublicUserPlanTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591