/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: ContractorLicenseWebServiceService.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2011
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 208329 2011-11-25 08:55:39Z ACHIEVO\alan.hu $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ContractorLicenseWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
    public partial class ContractorLicenseWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getContrLicListByUserSeqNBROperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseValidListOperationCompleted;
        
        private System.Threading.SendOrPostCallback issueContractorLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteContractorLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getContractorLicenseValidListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ContractorLicenseWebServiceService() {
            
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getContrLicListByUserSeqNBRCompletedEventHandler getContrLicListByUserSeqNBRCompleted;
        
        /// <remarks/>
        public event getLicenseValidListCompletedEventHandler getLicenseValidListCompleted;
        
        /// <remarks/>
        public event issueContractorLicenseCompletedEventHandler issueContractorLicenseCompleted;
        
        /// <remarks/>
        public event deleteContractorLicenseCompletedEventHandler deleteContractorLicenseCompleted;
        
        /// <remarks/>
        public event getContractorLicenseValidListCompletedEventHandler getContractorLicenseValidListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ContractorLicenseModel4WS[] getContrLicListByUserSeqNBR([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getContrLicListByUserSeqNBR", new object[] {
                        arg0,
                        arg1});
            return ((ContractorLicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getContrLicListByUserSeqNBRAsync(string arg0, string arg1) {
            this.getContrLicListByUserSeqNBRAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getContrLicListByUserSeqNBRAsync(string arg0, string arg1, object userState) {
            if ((this.getContrLicListByUserSeqNBROperationCompleted == null)) {
                this.getContrLicListByUserSeqNBROperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContrLicListByUserSeqNBROperationCompleted);
            }
            this.InvokeAsync("getContrLicListByUserSeqNBR", new object[] {
                        arg0,
                        arg1}, this.getContrLicListByUserSeqNBROperationCompleted, userState);
        }
        
        private void OngetContrLicListByUserSeqNBROperationCompleted(object arg) {
            if ((this.getContrLicListByUserSeqNBRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContrLicListByUserSeqNBRCompleted(this, new getContrLicListByUserSeqNBRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SearchResultModel getLicenseValidList([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypeModel arg5)
        {
            object[] results = this.Invoke("getLicenseValidList", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5});
            return ((SearchResultModel)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseValidListAsync(string arg0, long arg1, LicenseModel4WS arg2, bool arg3, QueryFormat arg4, CapTypeModel arg5) {
            this.getLicenseValidListAsync(arg0, arg1, arg2, arg3, arg4, arg5, null);
        }
        
        /// <remarks/>
        public void getLicenseValidListAsync(string arg0, long arg1, LicenseModel4WS arg2, bool arg3, QueryFormat arg4, CapTypeModel arg5, object userState) {
            if ((this.getLicenseValidListOperationCompleted == null)) {
                this.getLicenseValidListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseValidListOperationCompleted);
            }
            this.InvokeAsync("getLicenseValidList", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5}, this.getLicenseValidListOperationCompleted, userState);
        }
        
        private void OngetLicenseValidListOperationCompleted(object arg) {
            if ((this.getLicenseValidListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseValidListCompleted(this, new getLicenseValidListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int issueContractorLicense([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg4, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg5, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg6, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7) {
            object[] results = this.Invoke("issueContractorLicense", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void issueContractorLicenseAsync(string arg0, string arg1, string arg2, string arg3, long arg4, bool arg5, bool arg6, string arg7) {
            this.issueContractorLicenseAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }
        
        /// <remarks/>
        public void issueContractorLicenseAsync(string arg0, string arg1, string arg2, string arg3, long arg4, bool arg5, bool arg6, string arg7, object userState) {
            if ((this.issueContractorLicenseOperationCompleted == null)) {
                this.issueContractorLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnissueContractorLicenseOperationCompleted);
            }
            this.InvokeAsync("issueContractorLicense", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7}, this.issueContractorLicenseOperationCompleted, userState);
        }
        
        private void OnissueContractorLicenseOperationCompleted(object arg) {
            if ((this.issueContractorLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.issueContractorLicenseCompleted(this, new issueContractorLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int deleteContractorLicense([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] DeleteContracotrLicensePK[] arg1) {
            object[] results = this.Invoke("deleteContractorLicense", new object[] {
                        arg0,
                        arg1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteContractorLicenseAsync(string arg0, DeleteContracotrLicensePK[] arg1) {
            this.deleteContractorLicenseAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void deleteContractorLicenseAsync(string arg0, DeleteContracotrLicensePK[] arg1, object userState) {
            if ((this.deleteContractorLicenseOperationCompleted == null)) {
                this.deleteContractorLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteContractorLicenseOperationCompleted);
            }
            this.InvokeAsync("deleteContractorLicense", new object[] {
                        arg0,
                        arg1}, this.deleteContractorLicenseOperationCompleted, userState);
        }
        
        private void OndeleteContractorLicenseOperationCompleted(object arg) {
            if ((this.deleteContractorLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteContractorLicenseCompleted(this, new deleteContractorLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS[] getContractorLicenseValidList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg2) {
            object[] results = this.Invoke("getContractorLicenseValidList", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((LicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getContractorLicenseValidListAsync(string arg0, string arg1, bool arg2) {
            this.getContractorLicenseValidListAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getContractorLicenseValidListAsync(string arg0, string arg1, bool arg2, object userState) {
            if ((this.getContractorLicenseValidListOperationCompleted == null)) {
                this.getContractorLicenseValidListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContractorLicenseValidListOperationCompleted);
            }
            this.InvokeAsync("getContractorLicenseValidList", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getContractorLicenseValidListOperationCompleted, userState);
        }
        
        private void OngetContractorLicenseValidListOperationCompleted(object arg) {
            if ((this.getContractorLicenseValidListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContractorLicenseValidListCompleted(this, new getContractorLicenseValidListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getContrLicListByUserSeqNBRCompletedEventHandler(object sender, getContrLicListByUserSeqNBRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContrLicListByUserSeqNBRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getContrLicListByUserSeqNBRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContractorLicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContractorLicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getLicenseValidListCompletedEventHandler(object sender, getLicenseValidListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseValidListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseValidListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void issueContractorLicenseCompletedEventHandler(object sender, issueContractorLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class issueContractorLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal issueContractorLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void deleteContractorLicenseCompletedEventHandler(object sender, deleteContractorLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteContractorLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteContractorLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getContractorLicenseValidListCompletedEventHandler(object sender, getContractorLicenseValidListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContractorLicenseValidListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getContractorLicenseValidListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591