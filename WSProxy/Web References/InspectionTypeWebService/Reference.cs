/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: CapModel4WS.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2012
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 221772 2012-06-11 08:48:43Z ACHIEVO\daly.zeng $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "InspectionTypeWebServiceServiceSoapBinding", Namespace = "http://service.webservice.accela.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LanguageModel))]
    public partial class InspectionTypeWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getInspectionTypesByGroupCodeOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionGroupsOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypeCategoriesByCapIDOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypesByCapIDAndCategoryOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted;

        private System.Threading.SendOrPostCallback getRelationshipOfCategoryAndInspectionTypeOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionResultByGroupNameOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypesByCapTypeOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypesByCapIDOperationCompleted;

        private System.Threading.SendOrPostCallback getInspectionTypeCategoriesByCapIDForScheduleOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public InspectionTypeWebServiceService()
        {
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event getInspectionTypesByGroupCodeCompletedEventHandler getInspectionTypesByGroupCodeCompleted;

        /// <remarks/>
        public event getInspectionGroupsCompletedEventHandler getInspectionGroupsCompleted;

        /// <remarks/>
        public event getInspectionTypeCategoriesByCapIDCompletedEventHandler getInspectionTypeCategoriesByCapIDCompleted;

        /// <remarks/>
        public event getInspectionTypesByCapIDAndCategoryCompletedEventHandler getInspectionTypesByCapIDAndCategoryCompleted;

        /// <remarks/>
        public event getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventHandler getInspectionTypesByCapIDAndCategoryForScheduleCompleted;

        /// <remarks/>
        public event getRelationshipOfCategoryAndInspectionTypeCompletedEventHandler getRelationshipOfCategoryAndInspectionTypeCompleted;

        /// <remarks/>
        public event getInspectionResultByGroupNameCompletedEventHandler getInspectionResultByGroupNameCompleted;

        /// <remarks/>
        public event getInspectionTypesByCapTypeCompletedEventHandler getInspectionTypesByCapTypeCompleted;

        /// <remarks/>
        public event getInspectionTypesByCapIDCompletedEventHandler getInspectionTypesByCapIDCompleted;

        /// <remarks/>
        public event getInspectionTypeCategoriesByCapIDForScheduleCompletedEventHandler getInspectionTypeCategoriesByCapIDForScheduleCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionTypeModel[] getInspectionTypesByGroupCode([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1)
        {
            object[] results = this.Invoke("getInspectionTypesByGroupCode", new object[] {
                        arg0,
                        arg1});
            return ((InspectionTypeModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypesByGroupCodeAsync(string arg0, string arg1)
        {
            this.getInspectionTypesByGroupCodeAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getInspectionTypesByGroupCodeAsync(string arg0, string arg1, object userState)
        {
            if ((this.getInspectionTypesByGroupCodeOperationCompleted == null))
            {
                this.getInspectionTypesByGroupCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypesByGroupCodeOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypesByGroupCode", new object[] {
                        arg0,
                        arg1}, this.getInspectionTypesByGroupCodeOperationCompleted, userState);
        }

        private void OngetInspectionTypesByGroupCodeOperationCompleted(object arg)
        {
            if ((this.getInspectionTypesByGroupCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypesByGroupCodeCompleted(this, new getInspectionTypesByGroupCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionGroupModel[] getInspectionGroups([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0)
        {
            object[] results = this.Invoke("getInspectionGroups", new object[] {
                        arg0});
            return ((InspectionGroupModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionGroupsAsync(string arg0)
        {
            this.getInspectionGroupsAsync(arg0, null);
        }

        /// <remarks/>
        public void getInspectionGroupsAsync(string arg0, object userState)
        {
            if ((this.getInspectionGroupsOperationCompleted == null))
            {
                this.getInspectionGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionGroupsOperationCompleted);
            }
            this.InvokeAsync("getInspectionGroups", new object[] {
                        arg0}, this.getInspectionGroupsOperationCompleted, userState);
        }

        private void OngetInspectionGroupsOperationCompleted(object arg)
        {
            if ((this.getInspectionGroupsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionGroupsCompleted(this, new getInspectionGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BizDomainModel[] getInspectionTypeCategoriesByCapID([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0)
        {
            object[] results = this.Invoke("getInspectionTypeCategoriesByCapID", new object[] {
                        arg0});
            return ((BizDomainModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypeCategoriesByCapIDAsync(CapIDModel arg0)
        {
            this.getInspectionTypeCategoriesByCapIDAsync(arg0, null);
        }

        /// <remarks/>
        public void getInspectionTypeCategoriesByCapIDAsync(CapIDModel arg0, object userState)
        {
            if ((this.getInspectionTypeCategoriesByCapIDOperationCompleted == null))
            {
                this.getInspectionTypeCategoriesByCapIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypeCategoriesByCapIDOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypeCategoriesByCapID", new object[] {
                        arg0}, this.getInspectionTypeCategoriesByCapIDOperationCompleted, userState);
        }

        private void OngetInspectionTypeCategoriesByCapIDOperationCompleted(object arg)
        {
            if ((this.getInspectionTypeCategoriesByCapIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypeCategoriesByCapIDCompleted(this, new getInspectionTypeCategoriesByCapIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionTypeModel[] getInspectionTypesByCapIDAndCategory([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1)
        {
            object[] results = this.Invoke("getInspectionTypesByCapIDAndCategory", new object[] {
                        arg0,
                        arg1});
            return ((InspectionTypeModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAndCategoryAsync(CapIDModel arg0, string arg1)
        {
            this.getInspectionTypesByCapIDAndCategoryAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAndCategoryAsync(CapIDModel arg0, string arg1, object userState)
        {
            if ((this.getInspectionTypesByCapIDAndCategoryOperationCompleted == null))
            {
                this.getInspectionTypesByCapIDAndCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypesByCapIDAndCategoryOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypesByCapIDAndCategory", new object[] {
                        arg0,
                        arg1}, this.getInspectionTypesByCapIDAndCategoryOperationCompleted, userState);
        }

        private void OngetInspectionTypesByCapIDAndCategoryOperationCompleted(object arg)
        {
            if ((this.getInspectionTypesByCapIDAndCategoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypesByCapIDAndCategoryCompleted(this, new getInspectionTypesByCapIDAndCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionTypeModel[] getInspectionTypesByCapIDAndCategoryForSchedule([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1)
        {
            object[] results = this.Invoke("getInspectionTypesByCapIDAndCategoryForSchedule", new object[] {
                        arg0,
                        arg1});
            return ((InspectionTypeModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAndCategoryForScheduleAsync(CapIDModel arg0, string arg1)
        {
            this.getInspectionTypesByCapIDAndCategoryForScheduleAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAndCategoryForScheduleAsync(CapIDModel arg0, string arg1, object userState)
        {
            if ((this.getInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted == null))
            {
                this.getInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypesByCapIDAndCategoryForSchedule", new object[] {
                        arg0,
                        arg1}, this.getInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted, userState);
        }

        private void OngetInspectionTypesByCapIDAndCategoryForScheduleOperationCompleted(object arg)
        {
            if ((this.getInspectionTypesByCapIDAndCategoryForScheduleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypesByCapIDAndCategoryForScheduleCompleted(this, new getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public XInspectionTypeCategoryModel[] getRelationshipOfCategoryAndInspectionType([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0)
        {
            object[] results = this.Invoke("getRelationshipOfCategoryAndInspectionType", new object[] {
                        arg0});
            return ((XInspectionTypeCategoryModel[])(results[0]));
        }

        /// <remarks/>
        public void getRelationshipOfCategoryAndInspectionTypeAsync(CapIDModel arg0)
        {
            this.getRelationshipOfCategoryAndInspectionTypeAsync(arg0, null);
        }

        /// <remarks/>
        public void getRelationshipOfCategoryAndInspectionTypeAsync(CapIDModel arg0, object userState)
        {
            if ((this.getRelationshipOfCategoryAndInspectionTypeOperationCompleted == null))
            {
                this.getRelationshipOfCategoryAndInspectionTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelationshipOfCategoryAndInspectionTypeOperationCompleted);
            }
            this.InvokeAsync("getRelationshipOfCategoryAndInspectionType", new object[] {
                        arg0}, this.getRelationshipOfCategoryAndInspectionTypeOperationCompleted, userState);
        }

        private void OngetRelationshipOfCategoryAndInspectionTypeOperationCompleted(object arg)
        {
            if ((this.getRelationshipOfCategoryAndInspectionTypeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelationshipOfCategoryAndInspectionTypeCompleted(this, new getRelationshipOfCategoryAndInspectionTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionResultModel[] getInspectionResultByGroupName([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2)
        {
            object[] results = this.Invoke("getInspectionResultByGroupName", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((InspectionResultModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionResultByGroupNameAsync(string arg0, string arg1, string arg2)
        {
            this.getInspectionResultByGroupNameAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void getInspectionResultByGroupNameAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.getInspectionResultByGroupNameOperationCompleted == null))
            {
                this.getInspectionResultByGroupNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionResultByGroupNameOperationCompleted);
            }
            this.InvokeAsync("getInspectionResultByGroupName", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getInspectionResultByGroupNameOperationCompleted, userState);
        }

        private void OngetInspectionResultByGroupNameOperationCompleted(object arg)
        {
            if ((this.getInspectionResultByGroupNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionResultByGroupNameCompleted(this, new getInspectionResultByGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionTypeModel[] getInspectionTypesByCapType([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypeModel arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3)
        {
            object[] results = this.Invoke("getInspectionTypesByCapType", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
            return ((InspectionTypeModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypesByCapTypeAsync(CapTypeModel arg0, CapIDModel arg1, QueryFormat arg2, string arg3)
        {
            this.getInspectionTypesByCapTypeAsync(arg0, arg1, arg2, arg3, null);
        }

        /// <remarks/>
        public void getInspectionTypesByCapTypeAsync(CapTypeModel arg0, CapIDModel arg1, QueryFormat arg2, string arg3, object userState)
        {
            if ((this.getInspectionTypesByCapTypeOperationCompleted == null))
            {
                this.getInspectionTypesByCapTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypesByCapTypeOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypesByCapType", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.getInspectionTypesByCapTypeOperationCompleted, userState);
        }

        private void OngetInspectionTypesByCapTypeOperationCompleted(object arg)
        {
            if ((this.getInspectionTypesByCapTypeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypesByCapTypeCompleted(this, new getInspectionTypesByCapTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public InspectionTypeModel[] getInspectionTypesByCapID([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1)
        {
            object[] results = this.Invoke("getInspectionTypesByCapID", new object[] {
                        arg0,
                        arg1});
            return ((InspectionTypeModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAsync(CapIDModel arg0, string arg1)
        {
            this.getInspectionTypesByCapIDAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getInspectionTypesByCapIDAsync(CapIDModel arg0, string arg1, object userState)
        {
            if ((this.getInspectionTypesByCapIDOperationCompleted == null))
            {
                this.getInspectionTypesByCapIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypesByCapIDOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypesByCapID", new object[] {
                        arg0,
                        arg1}, this.getInspectionTypesByCapIDOperationCompleted, userState);
        }

        private void OngetInspectionTypesByCapIDOperationCompleted(object arg)
        {
            if ((this.getInspectionTypesByCapIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypesByCapIDCompleted(this, new getInspectionTypesByCapIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://service.webservice.accela.com/", ResponseNamespace = "http://service.webservice.accela.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BizDomainModel[] getInspectionTypeCategoriesByCapIDForSchedule([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel arg0)
        {
            object[] results = this.Invoke("getInspectionTypeCategoriesByCapIDForSchedule", new object[] {
                        arg0});
            return ((BizDomainModel[])(results[0]));
        }

        /// <remarks/>
        public void getInspectionTypeCategoriesByCapIDForScheduleAsync(CapIDModel arg0)
        {
            this.getInspectionTypeCategoriesByCapIDForScheduleAsync(arg0, null);
        }

        /// <remarks/>
        public void getInspectionTypeCategoriesByCapIDForScheduleAsync(CapIDModel arg0, object userState)
        {
            if ((this.getInspectionTypeCategoriesByCapIDForScheduleOperationCompleted == null))
            {
                this.getInspectionTypeCategoriesByCapIDForScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInspectionTypeCategoriesByCapIDForScheduleOperationCompleted);
            }
            this.InvokeAsync("getInspectionTypeCategoriesByCapIDForSchedule", new object[] {
                        arg0}, this.getInspectionTypeCategoriesByCapIDForScheduleOperationCompleted, userState);
        }

        private void OngetInspectionTypeCategoriesByCapIDForScheduleOperationCompleted(object arg)
        {
            if ((this.getInspectionTypeCategoriesByCapIDForScheduleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInspectionTypeCategoriesByCapIDForScheduleCompleted(this, new getInspectionTypeCategoriesByCapIDForScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypesByGroupCodeCompletedEventHandler(object sender, getInspectionTypesByGroupCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypesByGroupCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypesByGroupCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionTypeModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionTypeModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionGroupsCompletedEventHandler(object sender, getInspectionGroupsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionGroupModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionGroupModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypeCategoriesByCapIDCompletedEventHandler(object sender, getInspectionTypeCategoriesByCapIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypeCategoriesByCapIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypeCategoriesByCapIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public BizDomainModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((BizDomainModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypesByCapIDAndCategoryCompletedEventHandler(object sender, getInspectionTypesByCapIDAndCategoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypesByCapIDAndCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypesByCapIDAndCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionTypeModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionTypeModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventHandler(object sender, getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypesByCapIDAndCategoryForScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionTypeModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionTypeModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRelationshipOfCategoryAndInspectionTypeCompletedEventHandler(object sender, getRelationshipOfCategoryAndInspectionTypeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRelationshipOfCategoryAndInspectionTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getRelationshipOfCategoryAndInspectionTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public XInspectionTypeCategoryModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((XInspectionTypeCategoryModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionResultByGroupNameCompletedEventHandler(object sender, getInspectionResultByGroupNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionResultByGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionResultByGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionResultModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionResultModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypesByCapTypeCompletedEventHandler(object sender, getInspectionTypesByCapTypeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypesByCapTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypesByCapTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionTypeModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionTypeModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypesByCapIDCompletedEventHandler(object sender, getInspectionTypesByCapIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypesByCapIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypesByCapIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public InspectionTypeModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((InspectionTypeModel[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInspectionTypeCategoriesByCapIDForScheduleCompletedEventHandler(object sender, getInspectionTypeCategoriesByCapIDForScheduleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInspectionTypeCategoriesByCapIDForScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInspectionTypeCategoriesByCapIDForScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public BizDomainModel[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((BizDomainModel[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591