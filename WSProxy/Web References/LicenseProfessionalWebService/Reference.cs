/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: CapModel4WS.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2012
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 228065 2012-07-27 02:07:21Z ACHIEVO\daly.zeng $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseProfessionalWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(getCapIDListByLP))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LanguageModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(getTradeNames))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(createOrUpdateLicenseProfessionalsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(createOrUpdateLicenseProfessionals))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(getTradeNameListByLicenseModelResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(getTradeNameListByLicenseModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(getLPListByCapID))]
    public partial class LicenseProfessionalWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getLPListByCapIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTradeNameListByLicenseModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback createOrUpdateLicenseProfessionalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTradeNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCapIDListByLPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenseProfessionalWebServiceService() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getLPListByCapIDCompletedEventHandler getLPListByCapIDCompleted;
        
        /// <remarks/>
        public event getTradeNameListByLicenseModelCompletedEventHandler getTradeNameListByLicenseModelCompleted;
        
        /// <remarks/>
        public event createOrUpdateLicenseProfessionalsCompletedEventHandler createOrUpdateLicenseProfessionalsCompleted;
        
        /// <remarks/>
        public event getTradeNamesCompletedEventHandler getTradeNamesCompleted;
        
        /// <remarks/>
        public event getCapIDListByLPCompletedEventHandler getCapIDListByLPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseProfessionalModel4WS[] getLPListByCapID([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapIDModel4WS arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("getLPListByCapID", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((LicenseProfessionalModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getLPListByCapIDAsync(string arg0, CapIDModel4WS arg1, string arg2) {
            this.getLPListByCapIDAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getLPListByCapIDAsync(string arg0, CapIDModel4WS arg1, string arg2, object userState) {
            if ((this.getLPListByCapIDOperationCompleted == null)) {
                this.getLPListByCapIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLPListByCapIDOperationCompleted);
            }
            this.InvokeAsync("getLPListByCapID", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getLPListByCapIDOperationCompleted, userState);
        }
        
        private void OngetLPListByCapIDOperationCompleted(object arg) {
            if ((this.getLPListByCapIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLPListByCapIDCompleted(this, new getLPListByCapIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SearchResultModel getTradeNameListByLicenseModel([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg5)
        {
            object[] results = this.Invoke("getTradeNameListByLicenseModel", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5});
            return ((SearchResultModel)(results[0]));
        }
        
        /// <remarks/>
        public void getTradeNameListByLicenseModelAsync(string arg0, string arg1, LicenseModel arg2, string arg3, string arg4, QueryFormat arg5) {
            this.getTradeNameListByLicenseModelAsync(arg0, arg1, arg2, arg3, arg4, arg5, null);
        }
        
        /// <remarks/>
        public void getTradeNameListByLicenseModelAsync(string arg0, string arg1, LicenseModel arg2, string arg3, string arg4, QueryFormat arg5, object userState) {
            if ((this.getTradeNameListByLicenseModelOperationCompleted == null)) {
                this.getTradeNameListByLicenseModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTradeNameListByLicenseModelOperationCompleted);
            }
            this.InvokeAsync("getTradeNameListByLicenseModel", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5}, this.getTradeNameListByLicenseModelOperationCompleted, userState);
        }
        
        private void OngetTradeNameListByLicenseModelOperationCompleted(object arg) {
            if ((this.getTradeNameListByLicenseModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTradeNameListByLicenseModelCompleted(this, new getTradeNameListByLicenseModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void createOrUpdateLicenseProfessionals([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseProfessionalModel4WS[] arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            this.Invoke("createOrUpdateLicenseProfessionals", new object[] {
                        arg0,
                        arg1,
                        arg2});
        }
        
        /// <remarks/>
        public void createOrUpdateLicenseProfessionalsAsync(string arg0, LicenseProfessionalModel4WS[] arg1, string arg2) {
            this.createOrUpdateLicenseProfessionalsAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void createOrUpdateLicenseProfessionalsAsync(string arg0, LicenseProfessionalModel4WS[] arg1, string arg2, object userState) {
            if ((this.createOrUpdateLicenseProfessionalsOperationCompleted == null)) {
                this.createOrUpdateLicenseProfessionalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOrUpdateLicenseProfessionalsOperationCompleted);
            }
            this.InvokeAsync("createOrUpdateLicenseProfessionals", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.createOrUpdateLicenseProfessionalsOperationCompleted, userState);
        }
        
        private void OncreateOrUpdateLicenseProfessionalsOperationCompleted(object arg) {
            if ((this.createOrUpdateLicenseProfessionalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createOrUpdateLicenseProfessionalsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS[] getTradeNames([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3) {
            object[] results = this.Invoke("getTradeNames", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
            return ((LicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getTradeNamesAsync(string arg0, string arg1, string arg2, string arg3) {
            this.getTradeNamesAsync(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void getTradeNamesAsync(string arg0, string arg1, string arg2, string arg3, object userState) {
            if ((this.getTradeNamesOperationCompleted == null)) {
                this.getTradeNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTradeNamesOperationCompleted);
            }
            this.InvokeAsync("getTradeNames", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.getTradeNamesOperationCompleted, userState);
        }
        
        private void OngetTradeNamesOperationCompleted(object arg) {
            if ((this.getTradeNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTradeNamesCompleted(this, new getTradeNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapIDModel4WS[] getCapIDListByLP([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat4WS arg1) {
            object[] results = this.Invoke("getCapIDListByLP", new object[] {
                        arg0,
                        arg1});
            return ((CapIDModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getCapIDListByLPAsync(LicenseModel4WS arg0, QueryFormat4WS arg1) {
            this.getCapIDListByLPAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getCapIDListByLPAsync(LicenseModel4WS arg0, QueryFormat4WS arg1, object userState) {
            if ((this.getCapIDListByLPOperationCompleted == null)) {
                this.getCapIDListByLPOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCapIDListByLPOperationCompleted);
            }
            this.InvokeAsync("getCapIDListByLP", new object[] {
                        arg0,
                        arg1}, this.getCapIDListByLPOperationCompleted, userState);
        }
        
        private void OngetCapIDListByLPOperationCompleted(object arg) {
            if ((this.getCapIDListByLPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCapIDListByLPCompleted(this, new getCapIDListByLPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class getCapIDListByLP {
        
        private LicenseModel4WS arg0Field;
        
        private QueryFormat4WS arg1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS arg0 {
            get {
                return this.arg0Field;
            }
            set {
                this.arg0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public QueryFormat4WS arg1 {
            get {
                return this.arg1Field;
            }
            set {
                this.arg1Field = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class getTradeNames {
        
        private string arg0Field;
        
        private string arg1Field;
        
        private string arg2Field;
        
        private string arg3Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg0 {
            get {
                return this.arg0Field;
            }
            set {
                this.arg0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg1 {
            get {
                return this.arg1Field;
            }
            set {
                this.arg1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg2 {
            get {
                return this.arg2Field;
            }
            set {
                this.arg2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg3 {
            get {
                return this.arg3Field;
            }
            set {
                this.arg3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class createOrUpdateLicenseProfessionalsResponse {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class createOrUpdateLicenseProfessionals {
        
        private string arg0Field;
        
        private LicenseProfessionalModel4WS[] arg1Field;
        
        private string arg2Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg0 {
            get {
                return this.arg0Field;
            }
            set {
                this.arg0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseProfessionalModel4WS[] arg1 {
            get {
                return this.arg1Field;
            }
            set {
                this.arg1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg2 {
            get {
                return this.arg2Field;
            }
            set {
                this.arg2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class getTradeNameListByLicenseModelResponse {

        private SearchResultModel returnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SearchResultModel @return
        {
            get {
                return this.returnField;
            }
            set {
                this.returnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class getTradeNameListByLicenseModel {
        
        private string arg0Field;
        
        private string arg1Field;
        
        private LicenseModel arg2Field;
        
        private string arg3Field;
        
        private string arg4Field;
        
        private QueryFormat arg5Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg0 {
            get {
                return this.arg0Field;
            }
            set {
                this.arg0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg1 {
            get {
                return this.arg1Field;
            }
            set {
                this.arg1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel arg2 {
            get {
                return this.arg2Field;
            }
            set {
                this.arg2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg3 {
            get {
                return this.arg3Field;
            }
            set {
                this.arg3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg4 {
            get {
                return this.arg4Field;
            }
            set {
                this.arg4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public QueryFormat arg5 {
            get {
                return this.arg5Field;
            }
            set {
                this.arg5Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.webservice.accela.com/")]
    public partial class getLPListByCapID {
        
        private string arg0Field;
        
        private CapIDModel4WS arg1Field;
        
        private string arg2Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg0 {
            get {
                return this.arg0Field;
            }
            set {
                this.arg0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapIDModel4WS arg1 {
            get {
                return this.arg1Field;
            }
            set {
                this.arg1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string arg2 {
            get {
                return this.arg2Field;
            }
            set {
                this.arg2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLPListByCapIDCompletedEventHandler(object sender, getLPListByCapIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLPListByCapIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLPListByCapIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseProfessionalModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseProfessionalModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTradeNameListByLicenseModelCompletedEventHandler(object sender, getTradeNameListByLicenseModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTradeNameListByLicenseModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTradeNameListByLicenseModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResultModel Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResultModel)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createOrUpdateLicenseProfessionalsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTradeNamesCompletedEventHandler(object sender, getTradeNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTradeNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTradeNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCapIDListByLPCompletedEventHandler(object sender, getCapIDListByLPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCapIDListByLPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCapIDListByLPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CapIDModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CapIDModel4WS[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591