var EXPORTED_SYMBOLS = ['CrossBrowserCore'];const Cc = Components.classes;const Ci = Components.interfaces;const Cu = Components.utils;Cu.import ('resource://cross-browser/services.jsm');const WINDOWS = '@mozilla.org/windows-registry-key;1' in Cc;const OS_X = !WINDOWS && 'nsILocalFileMac' in Ci;if (WINDOWS) {	var registryKey = null;	var env = null;} else if (OS_X) {	var locAppDir = null;}var prefs = null;var strings = null;let currentVersion = 0;let oldVersion = 0;var CrossBrowserCore = {	list: [],	suppressLoadList: false,	loadList: function (forceReload) {		if (this.list.length && !forceReload) {			return;		}		this.list = [];		if (WINDOWS) {			if (!registryKey) {				registryKey = Cc ["@mozilla.org/windows-registry-key;1"].createInstance (Ci.nsIWindowsRegKey);				registryKey.open (Ci.nsIWindowsRegKey.ROOT_KEY_LOCAL_MACHINE,						"SOFTWARE\\Clients\\StartMenuInternet", Ci.nsIWindowsRegKey.ACCESS_READ);				env = Cc ["@mozilla.org/process/environment;1"].getService (Ci.nsIEnvironment);			}						//let hidePref = this.prefs.getCharPref ("hide").toLowerCase ();			for (var i = 0, iCount = registryKey.childCount; i < iCount; i++) {				try {					let name = registryKey.getChildName (i);					let subkey1 = registryKey.openChild (name, Ci.nsIWindowsRegKey.ACCESS_READ);					let value = subkey1.readStringValue (null);					subkey1.close ();					let subkey2 = registryKey.openChild (name + '\\shell\\open\\command', Ci.nsIWindowsRegKey.ACCESS_READ);					let command = subkey2.readStringValue (null);					subkey2.close ();										let params = command.indexOf ('"') >= 0 ? command.replace (/^"[^"]+"\s*/, '').split (' ') : [];					if (params.length > 0 && params [0] == '') {						params.shift ();					}					command = command.replace (/^"/, '').replace (/".*$/, '');					command = command.replace (/%(\w+)%/g, function (m) {						return env.get (m.substring (1, m.length - 1));					});					let file = Cc ["@mozilla.org/file/local;1"].createInstance (Ci.nsILocalFile);					file.initWithPath (command);										this.list.push ({						auto: true,						keyName: name,						name: value,						command: command,						params: params,						icon: this.findIconURL (file, 16)					});				} catch (e) {					Cu.reportError (e);				}			}			try {				var registryKeyIETester = Cc ["@mozilla.org/windows-registry-key;1"].createInstance (Ci.nsIWindowsRegKey);				registryKeyIETester.open (Ci.nsIWindowsRegKey.ROOT_KEY_LOCAL_MACHINE,				"SOFTWARE\\Core Services\\IETester", Ci.nsIWindowsRegKey.ACCESS_READ);								let command_ietester = registryKeyIETester.readStringValue("Install_Dir");				command_ietester += "\\IETester.exe"				var params_ie7 = ["-v","-ie7"];				var params_ie8 = ["-v","-ie8"];				var params_ie9 = ["-v","-ie9"];				let file_ietester = Cc ["@mozilla.org/file/local;1"].createInstance (Ci.nsILocalFile);				file_ietester.initWithPath (command_ietester);				this.list.push ({						auto: true,						keyName: "IETester_IE7",						name: "IETester_IE7",						command: command_ietester,						params: params_ie7,						icon: this.findIconURL (file_ietester, 16)					});				this.list.push ({						auto: true,						keyName: "IETester_IE8",						name: "IETester_IE8",						command: command_ietester,						params: params_ie8,						icon: this.findIconURL (file_ietester, 16)					});				this.list.push ({						auto: true,						keyName: "IETester_IE9",						name: "IETester_IE9",						command: command_ietester,						params: params_ie9,						icon: this.findIconURL (file_ietester, 16)					});			} catch(e) {				Cu.reportError (e);			}		} else if (OS_X) {			if (!locAppDir) {				locAppDir = Services.dirsvc.get ('LocApp', Ci.nsIFile);			}			//let hidePref = this.prefs.getCharPref ("hide").toLowerCase ();			let apps = ["Camino", "Google Chrome", "Firefox", "Flock", "Opera", "Safari", "SeaMonkey"];			for (let i = 0, iCount = apps.length; i < iCount; i++) {				let name = apps [i];				let appFile = locAppDir.clone ();				appFile.append (name + ".app");				if (appFile.exists ()) {					this.list.push ({						auto: true,						keyName: name,						name: name,						command: appFile.path,						params: [],						icon: this.findIconURL (appFile, 16),						//hidden: new RegExp ('\\b' + name + '\\b', 'i').test (hidePref)					});				}			}		}	},	findIconURL: function (file, size) {		if (WINDOWS || OS_X) {			return 'moz-icon:' + Services.io.newFileURI (file).spec + '?size=' + size;		}		try {			if (file.isSymlink ()) {				let target = file.target;				file = Cc ['@mozilla.org/file/local;1'].createInstance (Ci.nsILocalFile);				file.initWithPath (target);			}			let relPaths = ['chrome/icons/default/default' + size + '.png', 'product_logo_' + size + '.png'];			for (let i = 0, iCount = relPaths.length; i < iCount; i++) {				let relTest = file.parent.QueryInterface (Ci.nsILocalFile);				relTest.appendRelativePath (relPaths [i]);				if (relTest.exists ()) {					return Services.io.newFileURI (relTest).spec;				}			}			let absPaths = ['/usr/share/icons/default.kde4/' + size + 'x' + size + '/apps/' + file.leafName + '.png'];			for (let i = 0, iCount = absPaths.length; i < iCount; i++) {				let absTest = Cc ['@mozilla.org/file/local;1'].createInstance (Ci.nsILocalFile);				absTest.initWithPath (absPaths [i]);				if (absTest.exists ()) {					return Services.io.newFileURI (absTest).spec;				}			}		} catch (e) {		}		return 'chrome://openwith/content/openwith' + size + '.png';	}}