//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.
// 

#region Header

/**
* <pre>
*  Accela Citizen Access
*  File: Reference.cs
*
*  Accela, Inc.
*  Copyright (C): 2011
*
*  Description: EntityPermission web service.
*
*  Notes:
* $Id: Reference.cs 171222 2010-04-21 16:10:00Z ACHIEVO\alan.hu $.
*  Revision History
*  Date,            Who,        What
*  Oct 28, 2011      Alan Hu     Initial.
* </pre>
*/

#endregion

#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EntityPermissionWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(XEntityPermissionModelPKModel))]
    public partial class EntityPermissionWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback updateXEntityPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXEntityPermissionsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EntityPermissionWebServiceService() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event updateXEntityPermissionsCompletedEventHandler updateXEntityPermissionsCompleted;
        
        /// <remarks/>
        public event getXEntityPermissionsCompletedEventHandler getXEntityPermissionsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateXEntityPermissions([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] XEntityPermissionModel arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] XEntityPermissionModel[] arg1) {
            this.Invoke("updateXEntityPermissions", new object[] {
                        arg0,
                        arg1});
        }
        
        /// <remarks/>
        public void updateXEntityPermissionsAsync(XEntityPermissionModel arg0, XEntityPermissionModel[] arg1) {
            this.updateXEntityPermissionsAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void updateXEntityPermissionsAsync(XEntityPermissionModel arg0, XEntityPermissionModel[] arg1, object userState) {
            if ((this.updateXEntityPermissionsOperationCompleted == null)) {
                this.updateXEntityPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateXEntityPermissionsOperationCompleted);
            }
            this.InvokeAsync("updateXEntityPermissions", new object[] {
                        arg0,
                        arg1}, this.updateXEntityPermissionsOperationCompleted, userState);
        }
        
        private void OnupdateXEntityPermissionsOperationCompleted(object arg) {
            if ((this.updateXEntityPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateXEntityPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public XEntityPermissionModel[] getXEntityPermissions([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] XEntityPermissionModel arg0) {
            object[] results = this.Invoke("getXEntityPermissions", new object[] {
                        arg0});
            return ((XEntityPermissionModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getXEntityPermissionsAsync(XEntityPermissionModel arg0) {
            this.getXEntityPermissionsAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getXEntityPermissionsAsync(XEntityPermissionModel arg0, object userState) {
            if ((this.getXEntityPermissionsOperationCompleted == null)) {
                this.getXEntityPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXEntityPermissionsOperationCompleted);
            }
            this.InvokeAsync("getXEntityPermissions", new object[] {
                        arg0}, this.getXEntityPermissionsOperationCompleted, userState);
        }
        
        private void OngetXEntityPermissionsOperationCompleted(object arg) {
            if ((this.getXEntityPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXEntityPermissionsCompleted(this, new getXEntityPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateXEntityPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getXEntityPermissionsCompletedEventHandler(object sender, getXEntityPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXEntityPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXEntityPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public XEntityPermissionModel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((XEntityPermissionModel[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591