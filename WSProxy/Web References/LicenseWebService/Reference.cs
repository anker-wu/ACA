/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: LicenseWebServiceService.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2007-2012
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 221399 2012-06-07 08:21:31Z ACHIEVO\daly.zeng $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
 
    public partial class LicenseWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getDailyLicenseSeqNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvalidCapIDsByCheckLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseProfessionalsByLPModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicPermissionByLPTypeAndCapTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLPTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseConditionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseProfessionalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseByStateLicNbrOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRefLicenseListByLicenseModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenseWebServiceService() {
            
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getDailyLicenseSeqNumberCompletedEventHandler getDailyLicenseSeqNumberCompleted;
        
        /// <remarks/>
        public event getInvalidCapIDsByCheckLicenseCompletedEventHandler getInvalidCapIDsByCheckLicenseCompleted;
        
        /// <remarks/>
        public event getLicenseProfessionalsByLPModelCompletedEventHandler getLicenseProfessionalsByLPModelCompleted;
        
        /// <remarks/>
        public event getLicPermissionByLPTypeAndCapTypeCompletedEventHandler getLicPermissionByLPTypeAndCapTypeCompleted;
        
        /// <remarks/>
        public event getLPTypeCompletedEventHandler getLPTypeCompleted;
        
        /// <remarks/>
        public event getLicenseTypesCompletedEventHandler getLicenseTypesCompleted;
        
        /// <remarks/>
        public event getLicenseConditionCompletedEventHandler getLicenseConditionCompleted;
        
        /// <remarks/>
        public event getLicenseProfessionalsCompletedEventHandler getLicenseProfessionalsCompleted;
        
        /// <remarks/>
        public event getLicenseListCompletedEventHandler getLicenseListCompleted;
        
        /// <remarks/>
        public event getLicenseByStateLicNbrCompletedEventHandler getLicenseByStateLicNbrCompleted;
        
        /// <remarks/>
        public event getRefLicenseListByLicenseModelCompletedEventHandler getRefLicenseListByLicenseModelCompleted;
        
        /// <remarks/>
        public event getLicenseCompletedEventHandler getLicenseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getDailyLicenseSeqNumber([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseProfessionalModel arg2) {
            object[] results = this.Invoke("getDailyLicenseSeqNumber", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDailyLicenseSeqNumberAsync(string arg0, string arg1, LicenseProfessionalModel arg2) {
            this.getDailyLicenseSeqNumberAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getDailyLicenseSeqNumberAsync(string arg0, string arg1, LicenseProfessionalModel arg2, object userState) {
            if ((this.getDailyLicenseSeqNumberOperationCompleted == null)) {
                this.getDailyLicenseSeqNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDailyLicenseSeqNumberOperationCompleted);
            }
            this.InvokeAsync("getDailyLicenseSeqNumber", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getDailyLicenseSeqNumberOperationCompleted, userState);
        }
        
        private void OngetDailyLicenseSeqNumberOperationCompleted(object arg) {
            if ((this.getDailyLicenseSeqNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDailyLicenseSeqNumberCompleted(this, new getDailyLicenseSeqNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapIDModel4WS[] getInvalidCapIDsByCheckLicense([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute("arg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapModel4WS[] arg1) {
            object[] results = this.Invoke("getInvalidCapIDsByCheckLicense", new object[] {
                        arg0,
                        arg1});
            return ((CapIDModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getInvalidCapIDsByCheckLicenseAsync(string arg0, CapModel4WS[] arg1) {
            this.getInvalidCapIDsByCheckLicenseAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getInvalidCapIDsByCheckLicenseAsync(string arg0, CapModel4WS[] arg1, object userState) {
            if ((this.getInvalidCapIDsByCheckLicenseOperationCompleted == null)) {
                this.getInvalidCapIDsByCheckLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvalidCapIDsByCheckLicenseOperationCompleted);
            }
            this.InvokeAsync("getInvalidCapIDsByCheckLicense", new object[] {
                        arg0,
                        arg1}, this.getInvalidCapIDsByCheckLicenseOperationCompleted, userState);
        }
        
        private void OngetInvalidCapIDsByCheckLicenseOperationCompleted(object arg) {
            if ((this.getInvalidCapIDsByCheckLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvalidCapIDsByCheckLicenseCompleted(this, new getInvalidCapIDsByCheckLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseProfessionalModel[] getLicenseProfessionalsByLPModel([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseProfessionalModel arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg4) {
            object[] results = this.Invoke("getLicenseProfessionalsByLPModel", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4});
            return ((LicenseProfessionalModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseProfessionalsByLPModelAsync(string arg0, LicenseProfessionalModel arg1, string arg2, bool arg3, QueryFormat arg4) {
            this.getLicenseProfessionalsByLPModelAsync(arg0, arg1, arg2, arg3, arg4, null);
        }
        
        /// <remarks/>
        public void getLicenseProfessionalsByLPModelAsync(string arg0, LicenseProfessionalModel arg1, string arg2, bool arg3, QueryFormat arg4, object userState) {
            if ((this.getLicenseProfessionalsByLPModelOperationCompleted == null)) {
                this.getLicenseProfessionalsByLPModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseProfessionalsByLPModelOperationCompleted);
            }
            this.InvokeAsync("getLicenseProfessionalsByLPModel", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4}, this.getLicenseProfessionalsByLPModelOperationCompleted, userState);
        }
        
        private void OngetLicenseProfessionalsByLPModelOperationCompleted(object arg) {
            if ((this.getLicenseProfessionalsByLPModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseProfessionalsByLPModelCompleted(this, new getLicenseProfessionalsByLPModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS[] getLicPermissionByLPTypeAndCapType([System.Xml.Serialization.XmlElementAttribute("arg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS[] arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypeModel arg1) {
            object[] results = this.Invoke("getLicPermissionByLPTypeAndCapType", new object[] {
                        arg0,
                        arg1});
            return ((LicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicPermissionByLPTypeAndCapTypeAsync(LicenseModel4WS[] arg0, CapTypeModel arg1) {
            this.getLicPermissionByLPTypeAndCapTypeAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getLicPermissionByLPTypeAndCapTypeAsync(LicenseModel4WS[] arg0, CapTypeModel arg1, object userState) {
            if ((this.getLicPermissionByLPTypeAndCapTypeOperationCompleted == null)) {
                this.getLicPermissionByLPTypeAndCapTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicPermissionByLPTypeAndCapTypeOperationCompleted);
            }
            this.InvokeAsync("getLicPermissionByLPTypeAndCapType", new object[] {
                        arg0,
                        arg1}, this.getLicPermissionByLPTypeAndCapTypeOperationCompleted, userState);
        }
        
        private void OngetLicPermissionByLPTypeAndCapTypeOperationCompleted(object arg) {
            if ((this.getLicPermissionByLPTypeAndCapTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicPermissionByLPTypeAndCapTypeCompleted(this, new getLicPermissionByLPTypeAndCapTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getLPType([System.Xml.Serialization.XmlElementAttribute("arg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] AppSpecificInfoGroupModel4WS[] arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getLPType", new object[] {
                        arg0,
                        arg1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getLPTypeAsync(AppSpecificInfoGroupModel4WS[] arg0, string arg1) {
            this.getLPTypeAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getLPTypeAsync(AppSpecificInfoGroupModel4WS[] arg0, string arg1, object userState) {
            if ((this.getLPTypeOperationCompleted == null)) {
                this.getLPTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLPTypeOperationCompleted);
            }
            this.InvokeAsync("getLPType", new object[] {
                        arg0,
                        arg1}, this.getLPTypeOperationCompleted, userState);
        }
        
        private void OngetLPTypeOperationCompleted(object arg) {
            if ((this.getLPTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLPTypeCompleted(this, new getLPTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getLicenseTypes([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat4WS arg1) {
            object[] results = this.Invoke("getLicenseTypes", new object[] {
                        arg0,
                        arg1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseTypesAsync(string arg0, QueryFormat4WS arg1) {
            this.getLicenseTypesAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getLicenseTypesAsync(string arg0, QueryFormat4WS arg1, object userState) {
            if ((this.getLicenseTypesOperationCompleted == null)) {
                this.getLicenseTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseTypesOperationCompleted);
            }
            this.InvokeAsync("getLicenseTypes", new object[] {
                        arg0,
                        arg1}, this.getLicenseTypesOperationCompleted, userState);
        }
        
        private void OngetLicenseTypesOperationCompleted(object arg) {
            if ((this.getLicenseTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseTypesCompleted(this, new getLicenseTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS getLicenseCondition([System.Xml.Serialization.XmlElementAttribute("arg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("getLicenseCondition", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((LicenseModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseConditionAsync(string[] arg0, long arg1, string arg2) {
            this.getLicenseConditionAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getLicenseConditionAsync(string[] arg0, long arg1, string arg2, object userState) {
            if ((this.getLicenseConditionOperationCompleted == null)) {
                this.getLicenseConditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseConditionOperationCompleted);
            }
            this.InvokeAsync("getLicenseCondition", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getLicenseConditionOperationCompleted, userState);
        }
        
        private void OngetLicenseConditionOperationCompleted(object arg) {
            if ((this.getLicenseConditionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseConditionCompleted(this, new getLicenseConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel[] getLicenseProfessionals([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] SearchLicenseModel arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg2) {
            object[] results = this.Invoke("getLicenseProfessionals", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((LicenseModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseProfessionalsAsync(SearchLicenseModel arg0, bool arg1, QueryFormat arg2) {
            this.getLicenseProfessionalsAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getLicenseProfessionalsAsync(SearchLicenseModel arg0, bool arg1, QueryFormat arg2, object userState) {
            if ((this.getLicenseProfessionalsOperationCompleted == null)) {
                this.getLicenseProfessionalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseProfessionalsOperationCompleted);
            }
            this.InvokeAsync("getLicenseProfessionals", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getLicenseProfessionalsOperationCompleted, userState);
        }
        
        private void OngetLicenseProfessionalsOperationCompleted(object arg) {
            if ((this.getLicenseProfessionalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseProfessionalsCompleted(this, new getLicenseProfessionalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS[] getLicenseList([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ProviderModel4WS arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QueryFormat arg4)
        {
            object[] results = this.Invoke("getLicenseList", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4});
            return ((LicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseListAsync(string arg0, LicenseModel4WS arg1, ProviderModel4WS arg2, bool arg3,QueryFormat arg4) {
            this.getLicenseListAsync(arg0, arg1, arg2, arg3, arg4, null);
        }
        
        /// <remarks/>
        public void getLicenseListAsync(string arg0, LicenseModel4WS arg1, ProviderModel4WS arg2, bool arg3, QueryFormat arg4, object userState) {
            if ((this.getLicenseListOperationCompleted == null)) {
                this.getLicenseListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseListOperationCompleted);
            }
            this.InvokeAsync("getLicenseList", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4}, this.getLicenseListOperationCompleted, userState);
        }
        
        private void OngetLicenseListOperationCompleted(object arg) {
            if ((this.getLicenseListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseListCompleted(this, new getLicenseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS getLicenseByStateLicNbr([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg0) {
            object[] results = this.Invoke("getLicenseByStateLicNbr", new object[] {
                        arg0});
            return ((LicenseModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseByStateLicNbrAsync(LicenseModel4WS arg0) {
            this.getLicenseByStateLicNbrAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getLicenseByStateLicNbrAsync(LicenseModel4WS arg0, object userState) {
            if ((this.getLicenseByStateLicNbrOperationCompleted == null)) {
                this.getLicenseByStateLicNbrOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseByStateLicNbrOperationCompleted);
            }
            this.InvokeAsync("getLicenseByStateLicNbr", new object[] {
                        arg0}, this.getLicenseByStateLicNbrOperationCompleted, userState);
        }
        
        private void OngetLicenseByStateLicNbrOperationCompleted(object arg) {
            if ((this.getLicenseByStateLicNbrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseByStateLicNbrCompleted(this, new getLicenseByStateLicNbrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS[] getRefLicenseListByLicenseModel([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg1) {
            object[] results = this.Invoke("getRefLicenseListByLicenseModel", new object[] {
                        arg0,
                        arg1});
            return ((LicenseModel4WS[])(results[0]));
        }
        
        /// <remarks/>
        public void getRefLicenseListByLicenseModelAsync(string arg0, LicenseModel4WS arg1) {
            this.getRefLicenseListByLicenseModelAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getRefLicenseListByLicenseModelAsync(string arg0, LicenseModel4WS arg1, object userState) {
            if ((this.getRefLicenseListByLicenseModelOperationCompleted == null)) {
                this.getRefLicenseListByLicenseModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRefLicenseListByLicenseModelOperationCompleted);
            }
            this.InvokeAsync("getRefLicenseListByLicenseModel", new object[] {
                        arg0,
                        arg1}, this.getRefLicenseListByLicenseModelOperationCompleted, userState);
        }
        
        private void OngetRefLicenseListByLicenseModelOperationCompleted(object arg) {
            if ((this.getRefLicenseListByLicenseModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRefLicenseListByLicenseModelCompleted(this, new getRefLicenseListByLicenseModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LicenseModel4WS getLicense([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] LicenseModel4WS arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool arg1) {
            object[] results = this.Invoke("getLicense", new object[] {
                        arg0,
                        arg1});
            return ((LicenseModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseAsync(LicenseModel4WS arg0, bool arg1) {
            this.getLicenseAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getLicenseAsync(LicenseModel4WS arg0, bool arg1, object userState) {
            if ((this.getLicenseOperationCompleted == null)) {
                this.getLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseOperationCompleted);
            }
            this.InvokeAsync("getLicense", new object[] {
                        arg0,
                        arg1}, this.getLicenseOperationCompleted, userState);
        }
        
        private void OngetLicenseOperationCompleted(object arg) {
            if ((this.getLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseCompleted(this, new getLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
       
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDailyLicenseSeqNumberCompletedEventHandler(object sender, getDailyLicenseSeqNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDailyLicenseSeqNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDailyLicenseSeqNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInvalidCapIDsByCheckLicenseCompletedEventHandler(object sender, getInvalidCapIDsByCheckLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvalidCapIDsByCheckLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvalidCapIDsByCheckLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CapIDModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CapIDModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseProfessionalsByLPModelCompletedEventHandler(object sender, getLicenseProfessionalsByLPModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseProfessionalsByLPModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseProfessionalsByLPModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseProfessionalModel[] Result
        {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseProfessionalModel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicPermissionByLPTypeAndCapTypeCompletedEventHandler(object sender, getLicPermissionByLPTypeAndCapTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicPermissionByLPTypeAndCapTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicPermissionByLPTypeAndCapTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLPTypeCompletedEventHandler(object sender, getLPTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLPTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLPTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseTypesCompletedEventHandler(object sender, getLicenseTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseConditionCompletedEventHandler(object sender, getLicenseConditionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseConditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseConditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseProfessionalsCompletedEventHandler(object sender, getLicenseProfessionalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseProfessionalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseProfessionalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseListCompletedEventHandler(object sender, getLicenseListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseByStateLicNbrCompletedEventHandler(object sender, getLicenseByStateLicNbrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseByStateLicNbrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseByStateLicNbrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRefLicenseListByLicenseModelCompletedEventHandler(object sender, getRefLicenseListByLicenseModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRefLicenseListByLicenseModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRefLicenseListByLicenseModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseCompletedEventHandler(object sender, getLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseModel4WS)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
