/**
 * <pre>
 * 
 *  Accela Citizen Access
 *  File: CapTypePermissionWebServiceService.cs
 * 
 *  Accela, Inc.
 *  Copyright (C): 2009-2011
 * 
 *  Description:
 * 
 *  Notes:
 * $Id: Reference.cs 199461 2011-07-13 02:26:53Z ACHIEVO\alan.hu $.
 *  Revision History
 *  &lt;Date&gt;,    &lt;Who&gt;,    &lt;What&gt;
 * </pre>
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace Accela.ACA.WSProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CapTypePermissionWebServiceServiceSoapBinding", Namespace="http://service.webservice.accela.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CapTypePermissionPKModel))]
    public partial class CapTypePermissionWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback deleteCapTypePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCapTypePermission4ButtonSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback isDeletableDocumentByAppStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getButtonSetting4CapTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveCapTypePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCapTypePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCapTypesWithPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateButtonSetting4CapTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CapTypePermissionWebServiceService() {
            
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event deleteCapTypePermissionsCompletedEventHandler deleteCapTypePermissionsCompleted;
        
        /// <remarks/>
        public event getCapTypePermission4ButtonSettingCompletedEventHandler getCapTypePermission4ButtonSettingCompleted;
        
        /// <remarks/>
        public event isDeletableDocumentByAppStatusCompletedEventHandler isDeletableDocumentByAppStatusCompleted;
        
        /// <remarks/>
        public event getButtonSetting4CapTypeCompletedEventHandler getButtonSetting4CapTypeCompleted;
        
        /// <remarks/>
        public event saveCapTypePermissionsCompletedEventHandler saveCapTypePermissionsCompleted;
        
        /// <remarks/>
        public event getCapTypePermissionsCompletedEventHandler getCapTypePermissionsCompleted;
        
        /// <remarks/>
        public event getAllCapTypesWithPermissionCompletedEventHandler getAllCapTypesWithPermissionCompleted;
        
        /// <remarks/>
        public event updateButtonSetting4CapTypeCompletedEventHandler updateButtonSetting4CapTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteCapTypePermissions([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypePermissionModel arg0) {
            this.Invoke("deleteCapTypePermissions", new object[] {
                        arg0});
        }
        
        /// <remarks/>
        public void deleteCapTypePermissionsAsync(CapTypePermissionModel arg0) {
            this.deleteCapTypePermissionsAsync(arg0, null);
        }
        
        /// <remarks/>
        public void deleteCapTypePermissionsAsync(CapTypePermissionModel arg0, object userState) {
            if ((this.deleteCapTypePermissionsOperationCompleted == null)) {
                this.deleteCapTypePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteCapTypePermissionsOperationCompleted);
            }
            this.InvokeAsync("deleteCapTypePermissions", new object[] {
                        arg0}, this.deleteCapTypePermissionsOperationCompleted, userState);
        }
        
        private void OndeleteCapTypePermissionsOperationCompleted(object arg) {
            if ((this.deleteCapTypePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCapTypePermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapTypePermissionModel[] getCapTypePermission4ButtonSetting([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute("arg2", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypeModel[] arg2) {
            object[] results = this.Invoke("getCapTypePermission4ButtonSetting", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((CapTypePermissionModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getCapTypePermission4ButtonSettingAsync(string arg0, string arg1, CapTypeModel[] arg2) {
            this.getCapTypePermission4ButtonSettingAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void getCapTypePermission4ButtonSettingAsync(string arg0, string arg1, CapTypeModel[] arg2, object userState) {
            if ((this.getCapTypePermission4ButtonSettingOperationCompleted == null)) {
                this.getCapTypePermission4ButtonSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCapTypePermission4ButtonSettingOperationCompleted);
            }
            this.InvokeAsync("getCapTypePermission4ButtonSetting", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.getCapTypePermission4ButtonSettingOperationCompleted, userState);
        }
        
        private void OngetCapTypePermission4ButtonSettingOperationCompleted(object arg) {
            if ((this.getCapTypePermission4ButtonSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCapTypePermission4ButtonSettingCompleted(this, new getCapTypePermission4ButtonSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isDeletableDocumentByAppStatus([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypeModel arg3) {
            object[] results = this.Invoke("isDeletableDocumentByAppStatus", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isDeletableDocumentByAppStatusAsync(string arg0, string arg1, string arg2, CapTypeModel arg3) {
            this.isDeletableDocumentByAppStatusAsync(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void isDeletableDocumentByAppStatusAsync(string arg0, string arg1, string arg2, CapTypeModel arg3, object userState) {
            if ((this.isDeletableDocumentByAppStatusOperationCompleted == null)) {
                this.isDeletableDocumentByAppStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisDeletableDocumentByAppStatusOperationCompleted);
            }
            this.InvokeAsync("isDeletableDocumentByAppStatus", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.isDeletableDocumentByAppStatusOperationCompleted, userState);
        }
        
        private void OnisDeletableDocumentByAppStatusOperationCompleted(object arg) {
            if ((this.isDeletableDocumentByAppStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isDeletableDocumentByAppStatusCompleted(this, new isDeletableDocumentByAppStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ButtonSettingModel4WS getButtonSetting4CapType([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] ButtonSettingModel4WS arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getButtonSetting4CapType", new object[] {
                        arg0,
                        arg1});
            return ((ButtonSettingModel4WS)(results[0]));
        }
        
        /// <remarks/>
        public void getButtonSetting4CapTypeAsync(ButtonSettingModel4WS arg0, string arg1) {
            this.getButtonSetting4CapTypeAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getButtonSetting4CapTypeAsync(ButtonSettingModel4WS arg0, string arg1, object userState) {
            if ((this.getButtonSetting4CapTypeOperationCompleted == null)) {
                this.getButtonSetting4CapTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetButtonSetting4CapTypeOperationCompleted);
            }
            this.InvokeAsync("getButtonSetting4CapType", new object[] {
                        arg0,
                        arg1}, this.getButtonSetting4CapTypeOperationCompleted, userState);
        }
        
        private void OngetButtonSetting4CapTypeOperationCompleted(object arg) {
            if ((this.getButtonSetting4CapTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getButtonSetting4CapTypeCompleted(this, new getButtonSetting4CapTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void saveCapTypePermissions([System.Xml.Serialization.XmlElementAttribute("arg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypePermissionModel[] arg0) {
            this.Invoke("saveCapTypePermissions", new object[] {
                        arg0});
        }
        
        /// <remarks/>
        public void saveCapTypePermissionsAsync(CapTypePermissionModel[] arg0) {
            this.saveCapTypePermissionsAsync(arg0, null);
        }
        
        /// <remarks/>
        public void saveCapTypePermissionsAsync(CapTypePermissionModel[] arg0, object userState) {
            if ((this.saveCapTypePermissionsOperationCompleted == null)) {
                this.saveCapTypePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveCapTypePermissionsOperationCompleted);
            }
            this.InvokeAsync("saveCapTypePermissions", new object[] {
                        arg0}, this.saveCapTypePermissionsOperationCompleted, userState);
        }
        
        private void OnsaveCapTypePermissionsOperationCompleted(object arg) {
            if ((this.saveCapTypePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveCapTypePermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapTypePermissionModel[] getCapTypePermissions([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypePermissionModel arg0) {
            object[] results = this.Invoke("getCapTypePermissions", new object[] {
                        arg0});
            return ((CapTypePermissionModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getCapTypePermissionsAsync(CapTypePermissionModel arg0) {
            this.getCapTypePermissionsAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getCapTypePermissionsAsync(CapTypePermissionModel arg0, object userState) {
            if ((this.getCapTypePermissionsOperationCompleted == null)) {
                this.getCapTypePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCapTypePermissionsOperationCompleted);
            }
            this.InvokeAsync("getCapTypePermissions", new object[] {
                        arg0}, this.getCapTypePermissionsOperationCompleted, userState);
        }
        
        private void OngetCapTypePermissionsOperationCompleted(object arg) {
            if ((this.getCapTypePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCapTypePermissionsCompleted(this, new getCapTypePermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CapTypePermissionModel[] getAllCapTypesWithPermission([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypePermissionModel arg0) {
            object[] results = this.Invoke("getAllCapTypesWithPermission", new object[] {
                        arg0});
            return ((CapTypePermissionModel[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllCapTypesWithPermissionAsync(CapTypePermissionModel arg0) {
            this.getAllCapTypesWithPermissionAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getAllCapTypesWithPermissionAsync(CapTypePermissionModel arg0, object userState) {
            if ((this.getAllCapTypesWithPermissionOperationCompleted == null)) {
                this.getAllCapTypesWithPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCapTypesWithPermissionOperationCompleted);
            }
            this.InvokeAsync("getAllCapTypesWithPermission", new object[] {
                        arg0}, this.getAllCapTypesWithPermissionOperationCompleted, userState);
        }
        
        private void OngetAllCapTypesWithPermissionOperationCompleted(object arg) {
            if ((this.getAllCapTypesWithPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCapTypesWithPermissionCompleted(this, new getAllCapTypesWithPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.webservice.accela.com/", ResponseNamespace="http://service.webservice.accela.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateButtonSetting4CapType([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] ButtonSettingModel4WS arg1, [System.Xml.Serialization.XmlElementAttribute("arg2", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] CapTypePermissionModel[] arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3) {
            this.Invoke("updateButtonSetting4CapType", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
        }
        
        /// <remarks/>
        public void updateButtonSetting4CapTypeAsync(string arg0, ButtonSettingModel4WS arg1, CapTypePermissionModel[] arg2, string arg3) {
            this.updateButtonSetting4CapTypeAsync(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void updateButtonSetting4CapTypeAsync(string arg0, ButtonSettingModel4WS arg1, CapTypePermissionModel[] arg2, string arg3, object userState) {
            if ((this.updateButtonSetting4CapTypeOperationCompleted == null)) {
                this.updateButtonSetting4CapTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateButtonSetting4CapTypeOperationCompleted);
            }
            this.InvokeAsync("updateButtonSetting4CapType", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.updateButtonSetting4CapTypeOperationCompleted, userState);
        }
        
        private void OnupdateButtonSetting4CapTypeOperationCompleted(object arg) {
            if ((this.updateButtonSetting4CapTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateButtonSetting4CapTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void deleteCapTypePermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getCapTypePermission4ButtonSettingCompletedEventHandler(object sender, getCapTypePermission4ButtonSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCapTypePermission4ButtonSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCapTypePermission4ButtonSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CapTypePermissionModel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CapTypePermissionModel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void isDeletableDocumentByAppStatusCompletedEventHandler(object sender, isDeletableDocumentByAppStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isDeletableDocumentByAppStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isDeletableDocumentByAppStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getButtonSetting4CapTypeCompletedEventHandler(object sender, getButtonSetting4CapTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getButtonSetting4CapTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getButtonSetting4CapTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ButtonSettingModel4WS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ButtonSettingModel4WS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void saveCapTypePermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getCapTypePermissionsCompletedEventHandler(object sender, getCapTypePermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCapTypePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCapTypePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CapTypePermissionModel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CapTypePermissionModel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getAllCapTypesWithPermissionCompletedEventHandler(object sender, getAllCapTypesWithPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCapTypesWithPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCapTypesWithPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CapTypePermissionModel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CapTypePermissionModel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updateButtonSetting4CapTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591